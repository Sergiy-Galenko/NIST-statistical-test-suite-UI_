<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="buttonOpenInExcelOpeninMSExcel" xml:space="preserve">
    <value>Відкрити в MS Excel</value>
  </data>
  <data name="buttonOpenInExcelWait" xml:space="preserve">
    <value>Зачекайте...</value>
  </data>
  <data name="buttonOptionsClose" xml:space="preserve">
    <value>Опції &lt;&lt;</value>
  </data>
  <data name="buttonOptionsOpen" xml:space="preserve">
    <value>Опції &gt;&gt;</value>
  </data>
  <data name="SelectInputFile" xml:space="preserve">
    <value>Будь ласка, кажіть вхідний файл</value>
  </data>
  <data name="SelectTest" xml:space="preserve">
    <value>Будь ласка, оберіть один із тестів</value>
  </data>
  <data name="TestsIsdone" xml:space="preserve">
    <value>Тестування завершено!
Витрачено часу:</value>
  </data>
  <data name="FileSize" xml:space="preserve">
    <value>Загальна довжина послідовності: </value>
  </data>
  <data name="MinFileSize" xml:space="preserve">
    <value>Мінімальна довжина загальної (вхідної) послідовності: </value>
  </data>
  <data name="ReadFormatASCII" xml:space="preserve">
    <value>Текстовий</value>
  </data>
  <data name="ReadFormatBinary" xml:space="preserve">
    <value>Двійковий</value>
  </data>
  <data name="ExploreStream" xml:space="preserve">
    <value>Досліджувана послідовність: </value>
  </data>
  <data name="BlockLengthForTest" xml:space="preserve">
    <value>Довжина блоку для тесту</value>
  </data>
  <data name="ErrorMinimumLength" xml:space="preserve">
    <value>Довжина вказаної послідовності для 
тестування більша ніж вхідний файл.

Як виправити: 
- обрати більший файл
- зменшити довжину послідовності для тестування</value>
  </data>
  <data name="toolTipbuttonFileOfAnalysis" xml:space="preserve">
    <value>Відкрити файл аналізу</value>
  </data>
  <data name="toolTipbuttonOpenDirectoryOfExperiments" xml:space="preserve">
    <value>Відкрити каталог тестів</value>
  </data>
  <data name="toolTipbuttonOpenInExcel" xml:space="preserve">
    <value>Відкрити файл аналізу в MS Excel</value>
  </data>
  <data name="toolTipbuttonOptions" xml:space="preserve">
    <value>Показати / Приховати опції</value>
  </data>
  <data name="toolTipbuttonSelectFile" xml:space="preserve">
    <value>Вказати вхідний файл</value>
  </data>
  <data name="toolTipbuttonTest" xml:space="preserve">
    <value>Почати тестування</value>
  </data>
  <data name="toolTipbuttonTestStop" xml:space="preserve">
    <value>Зупинити тестування</value>
  </data>
  <data name="toolTipcheckBoxSelectAll" xml:space="preserve">
    <value>Вибрати всі тести</value>
  </data>
  <data name="toolTipcomboBoxReadFormat" xml:space="preserve">
    <value>Двійковий - кожен байт у файлі складається з 8-ми біт даних. 
Текстовий - Послідовність з 1 та 0 таблиці ASCII.</value>
  </data>
  <data name="toolTiplabelFileSize" xml:space="preserve">
    <value>Якщо цей напис виділений червоним - довжина вказаної 
послідовності для тестування більша ніж вхідний файл.

Як виправити: 
- обрати більший файл
- зменшити довжину послідовності для тестування</value>
  </data>
  <data name="toolTipprogressBar1" xml:space="preserve">
    <value>Прогрес тестування</value>
  </data>
  <data name="toolTipradioButtonInputFile" xml:space="preserve">
    <value>В якості генератора обрати вхідний файл</value>
  </data>
  <data name="toolTiptextBoxBitStream" xml:space="preserve">
    <value>Кількість послідовностей</value>
  </data>
  <data name="toolTiptextBoxN" xml:space="preserve">
    <value>Довжина однієї послідовності</value>
  </data>
  <data name="toolTiptoolStripDropDownButton1" xml:space="preserve">
    <value>Змінити мову</value>
  </data>
</root>